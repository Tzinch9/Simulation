package org.simulation.dto;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class SimulationConfig {
    private final Scanner scanner;
    private final Map<EntityType, Map<String, Integer>> entityParameters;
    private int mapWidth;
    private int mapHeight;

    public SimulationConfig() {
        this.scanner = new Scanner(System.in);
        this.entityParameters = new HashMap<>();
        configure();
    }

    private void configure() {
        System.out.println("""
                
                0=====================================================================================================0
                |–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏–º—É–ª—è—Ü–∏—é —Ö–∏—â–Ω–∏–∫–æ–≤ –∏ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö!
                |=====================================================================================================
                |–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—É—â–µ—Å—Ç–≤.
                |=====================================================================================================
                |‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ö–æ–¥–æ–≤ —Å—É—â–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∂–∏—Ç—å –±–µ–∑ –µ–¥—ã.
                |–ó–Ω–∞—á–µ–Ω–∏–µ 10‚Äì15 –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—É—é –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å,
                |—á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã–º –∏—Å–∫–∞—Ç—å –µ–¥—É –∏ —Ä–∞–∑–º–Ω–æ–∂–∞—Ç—å—Å—è, –Ω–æ –¥–µ–ª–∞–µ—Ç –∏—Ö —É—è–∑–≤–∏–º—ã–º–∏, –µ—Å–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
                |–ù–∏–∑–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏–≤–µ–ª–æ –±—ã –∫ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ–º—É –≤—ã–º–∏—Ä–∞–Ω–∏—é, –∞ –≤—ã—Å–æ–∫–æ–µ ‚Äî –∫ –ø–µ—Ä–µ–∏–∑–±—ã—Ç–∫—É –ø–æ–ø—É–ª—è—Ü–∏–∏.
                |=====================================================================================================
                |ü™Ω –°–∫–æ—Ä–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –¥–∞–ª–µ–∫–æ —Å—É—â–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –∑–∞ —Ö–æ–¥.
                |–ó–Ω–∞—á–µ–Ω–∏–µ 1‚Äì2 –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ–µ, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ, —á—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö.
                |–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–¥–µ–ª–∞–ª–∞ –±—ã –∏—Ö —Å–ª–∏—à–∫–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏, –Ω–∞—Ä—É—à–∞—è –±–∞–ª–∞–Ω—Å.
                |=====================================================================================================
                |üí™ –°–∏–ª–∞ –∞—Ç–∞–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∑–¥–æ—Ä–æ–≤—å—è —Ö–∏—â–Ω–∏–∫ –º–æ–∂–µ—Ç –æ—Ç–Ω—è—Ç—å —É –∂–µ—Ä—Ç–≤—ã –∑–∞ –æ–¥–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.
                |–ó–Ω–∞—á–µ–Ω–∏–µ 1‚Äì2 –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ö–∏—â–Ω–∏–∫–∞–º —É–±–∏–≤–∞—Ç—å —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö –∑–∞ 5‚Äì10 —É–¥–∞—Ä–æ–≤,
                |—á—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –±–∞–ª–∞–Ω—Å: —Ö–∏—â–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –æ—Ö–æ—Ç—É,
                |–∞ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ –∏–º–µ—é—Ç —à–∞–Ω—Å —Å–±–µ–∂–∞—Ç—å –∏–ª–∏ —Ä–∞–∑–º–Ω–æ–∂–∏—Ç—å—Å—è.
                |–í—ã—Å–æ–∫–∞—è —Å–∏–ª–∞ –∞—Ç–∞–∫–∏ –ø—Ä–∏–≤–µ–ª–∞ –±—ã –∫ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º—É —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—é –ø–æ–ø—É–ª—è—Ü–∏–∏ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö.
                |=====================================================================================================
                |üçó –°—ä–µ–¥–æ–±–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∑–¥–æ—Ä–æ–≤—å—è —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–µ –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, —Å—ä–µ–≤ –æ–±—ä–µ–∫—Ç.
                |–ù–∏–∑–∫–∞—è —Å—ä–µ–¥–æ–±–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞–ª–∞ –±—ã –µ–¥—É —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±–æ–π, –∞ –≤—ã—Å–æ–∫–∞—è ‚Äî –∏–∑–±—ã—Ç–æ—á–Ω–æ–π, –Ω–∞—Ä—É—à–∞—è –±–∞–ª–∞–Ω—Å.
                0=====================================================================================================0
                
                """);
        System.out.println("0===================0\n" +
                "|–ù–ê–°–¢–†–û–ô–ö–ê –°–ò–ú–£–õ–Ø–¶–ò–ò|\n" +
                "0===================0\n");


        mapWidth = getPositiveInteger("""
                0==========================================0
                |–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∫–∞—Ä—Ç—ã.
                |–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç—ã –æ—Ç 10.
                |–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.
                0==========================================0
                """);
        mapHeight = getPositiveInteger("""
                0==========================================0
                |–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –∫–∞—Ä—Ç—ã.
                |–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç—ã –æ—Ç 10.
                |–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.
                0==========================================0
                """);

        configureHerbivore(EntityType.RABBIT, "RABBIT");
        configureHerbivore(EntityType.RACCOON, "RACCOON");
        configurePredator(EntityType.FOX, "FOX");
        configurePredator(EntityType.BEAR, "BEAR");
        configureEdible(EntityType.GRASS, "GRASS");
        configureEdible(EntityType.MUSHROOM, "MUSHROOM");
    }

    private void configureHerbivore(EntityType type, String name) {
        System.out.println("\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö " + name + ":");
        Map<String, Integer> params = new HashMap<>();
        params.put("health", getPositiveInteger("""
                0============================================================0
                |–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è.
                |–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–∫–æ–ª–æ 10‚Äì15
                |–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.
                0============================================================0
                """));
        params.put("speed", getPositiveInteger("""
                0====================================================================0
                |–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ—Ä–æ—Å—Ç–∏.
                |–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç 1 –¥–æ 2.
                |–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.
                0====================================================================0
                """));
        entityParameters.put(type, params);
    }

    private void configurePredator(EntityType type, String name) {
        System.out.println("\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ö–∏—â–Ω–∏–∫–æ–≤ " + name + ":");
        Map<String, Integer> params = new HashMap<>();
        params.put("health", getPositiveInteger("""
                0=======================================================0
                |–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è.
                |–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Ö–∏—â–Ω–∏–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–∫–æ–ª–æ 10‚Äì15.
                |–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.
                0=======================================================0
                """));
        params.put("speed", getPositiveInteger("""
                0==================================================0
                |–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ—Ä–æ—Å—Ç–∏.
                |–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ö–∏—â–Ω–∏–∫–∞ –æ—Ç 1 –¥–æ 2.
                |–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.
                0==================================================0
                """));
        params.put("attackPower", getNonNegativeInteger("""
                0============================================0
                |–í–≤–µ–¥–∏—Ç–µ –≤–µ–ª–∏—á–∏–Ω—É —Å–∏–ª—ã –∞—Ç–∞–∫–∏.
                |–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ —Å–∏–ª—ã –∞—Ç–∞–∫–∏ –æ—Ç 1 –¥–æ 2.
                |–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.
                0============================================0
                """));
        entityParameters.put(type, params);
    }

    private void configureEdible(EntityType type, String name) {
        System.out.println("\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—ä–µ–¥–æ–±–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ " + name + ":");
        Map<String, Integer> params = new HashMap<>();
        params.put("edibility", getNonNegativeInteger("""
                0==============================================0
                |–í–≤–µ–¥–∏—Ç–µ –≤–µ–ª–∏—á–∏–Ω—É —Å—ä–µ–¥–æ–±–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–æ–≤.
                |–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ —Å—ä–µ–¥–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç 5 –¥–æ 10.
                |–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.
                0==============================================0
                """));
        entityParameters.put(type, params);
    }

    private int getPositiveInteger(String prompt) {
        System.out.print(prompt);
        while (true) {
            try {
                int value = Integer.parseInt(scanner.nextLine());
                if (value > 0) {
                    return value;
                }
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: ");
            } catch (NumberFormatException e) {
                System.out.print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: ");
            }
        }
    }

    private int getNonNegativeInteger(String prompt) {
        System.out.print(prompt);
        while (true) {
            try {
                int value = Integer.parseInt(scanner.nextLine());
                if (value >= 0) {
                    return value;
                }
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: ");
            } catch (NumberFormatException e) {
                System.out.print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: ");
            }
        }
    }

    public int getMapWidth() {
        return mapWidth;
    }

    public int getMapHeight() {
        return mapHeight;
    }

    public Map<String, Integer> getParameters(EntityType type) {
        return entityParameters.getOrDefault(type, new HashMap<>());
    }
}